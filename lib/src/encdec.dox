/*!
 *  @file encdec.h
 *
 *  @brief The encdec header file contains the facets of the PxCrypt library that pertain
 *  to both encoding and decoding.
 */

namespace PxCrypt
{

//-Namespace Enums-----------------------------------------------------------------------------------------------------
/*!
 *  @enum EncType
 *
 *  This enum specifies the encoding strategy utilized when encoding/decoding data, which
 *  affects several aspects of the resultant image.
 *
 *  @par Relative
 *  @parblock
 *  This is the default encoding strategy.
 *
 *  The input data is broken up into 1-7 bit-wide frames in according to the value selected for
 *  bits per channel which are then woven into existing pixel data with each frame being mapped to
 *  one channel of a given pixel. This is accomplished by applying an offset to the original color
 *  channel value that matches the magnitude of the frame. The frame is subtracted from the original
 *  value if it is greater than @c 127; otherwise, the frame is added to the original value.
 *
 *  Because the data is not stored directly in the image, but rather as the difference between the
 *  original image and the encrypted image, the is no way to know what the offset for each channel
 *  was without a point of reference, and thus the original medium image is required in order to
 *  decode the encoded data. When coupled with a complex pre-shared key, data can been encoded
 *  quite securely using this strategy.
 *
 *  The effect each frame has on a given channel is directly proportional to its magnitude, with
 *  higher value frames causing greater distortion in the original image. The best case scenario
 *  occurs when the frame has a value of zero, while the worst is when the frame contains the maximum
 *  value allowed by the BPC setting. Overall this means that the choice of medium has no effect on
 *  the amount of distortion and that the degree of distortion at a given BPC is influenced entirely
 *  by the input payload when using this strategy, with ideal data consisting largely of low bits.
 *
 *  Best Case) 0
 *
 *  Worst Case) 2<SUP>N</SUP> - 1 (where N = bits per channel)
 *  @endparblock
 *
 *  @par Absolute
 *  @parblock
 *  Input data is broken up into frames in the same manner as the Relative strategy, but are simply
 *  inserted directly into a pixel's channel data by replacing the lowest bits up to amount allowed
 *  by the BPC value. This allows the convenience of not requiring the original medium to decode
 *  the encrypted data, but at the cost of security since the output image relies entirely on the
 *  strength of the pre shared key for protection.
 *
 *  With this strategy the potential distortion caused by each frame depends on both the input data
 *  and the selected medium, as the degree of change is dictated by how different the frame is compared
 *  to the original bits that are being replaced. The best case scenario occurs when the frames data
 *  matches the original exactly, while the worst is when it is completely different. This leads to the
 *  same range of potential impact on the original image as with the Relative strategy, but in theory
 *  means that this method can out perform said strategy on average when the variance of the payload
 *  closes matches the variance of the image's color data
 *
 *  Best Case) 0
 *
 *  Worst Case) 2<SUP>N</SUP> - 1 (where N = bits per channel)
 *  @endparblock
 *
 *  @var EncType Relative
 *  Requires the original medium in order to decode the encrypted data.
 *
 *  @var EncType Absolute
 *  Does not require the original medium in order to decode the encrypted data.
 */

}
